/* 
  Sketch generated by the Arduino IoT Cloud Thing "Your Thing Name"
  https://create.arduino.cc/cloud/things/your-thing-id-will-be-here 

  Arduino IoT Cloud Properties description

  The following variables are automatically generated and updated when changes are made to the Thing properties

  String tUIT;
  int counter;

  Properties which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

//String TUIT_Name = "TUIT103"; //copy these lines to thingProperties
//String tUIT(TUIT_Name);

int blue_led = 2; //onboard blue led
int redPin = 15;
int greenPin = 12;
int bluePin = 13;
int sensorPin = A0; // select the input pin for ldr

const int buttonPin = 4; //the number of the pushbutton

  
// Remote site information
const char http_site[] = "your_website_url.com"; //you can also hook up to a secure site
const int http_port = 80;

// Global variables
WiFiClient client;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 1
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();  

  // Attempt to connect to website
  if ( !getPage() ) {
    Serial.println("GET request failed");
  }
  //just a little LED action to let me know the wifi connected
  digitalWrite(greenPin, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(500);               // wait for a second
  digitalWrite(greenPin, LOW);    // turn the LED off by making the voltage LOW
  delay(500);               // wait for a second
    digitalWrite(greenPin, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(500);               // wait for a second
  digitalWrite(greenPin, LOW);    // turn the LED off by making the voltage LOW
  delay(500);               // wait for a second
    digitalWrite(greenPin, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(500);               // wait for a second
  digitalWrite(greenPin, LOW);    // turn the LED off by making the voltage LOW
  delay(500);               // wait for a second
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  pinMode(blue_led, OUTPUT);
  pinMode(buttonPin, INPUT);
  
  digitalWrite(blue_led, HIGH); //off
  
  // read the input pin:
  int buttonState = digitalRead(buttonPin);
  
  if (buttonState == LOW) {
  counter = counter + 1;
  digitalWrite(blue_led, LOW); //on
  if (counter > 10)  {
    getPage();
    counter = 1;
  }
  Serial.println(); //You can delete Serial messages. I just like using them during debugging code.
  Serial.print(tUIT);
  Serial.print(" has ");
  Serial.print(counter);
  Serial.print(" points.");
  Serial.println();
  
  delay(1000);               // wait for a second
  }
}

void onCounterChange() {

}

// Perform an HTTP GET request to a remote page
bool getPage() {
  
  // Attempt to make a connection to the remote server
  if ( !client.connect(http_site, http_port) ) {
    return false;
  }
  
  // Make an HTTP GET request
  
  client.println("GET /yourpath/to/yourtwilio.php HTTP/1.0");
  client.print("Host: ");
  client.println(http_site);
  client.println("Connection: close");
  client.println();
  
  return true;
}

void onTUITChange() {
  // Do something
}
